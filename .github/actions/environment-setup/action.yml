name: Splashable environment setup action
description: Sets up environments using this all-in-one composite action.
author: KTrain5169

inputs:
  language:
    description: The language to set up.
    required: true
  lang-ver:
    description: The version of the language.
    required: true
  package-manager:
    description: What package manager?
    required: true
  manager-version:
    description: What version of the package manager?
    required: true
  cache:
    description: Whether or not to use caching for lockfile/dependencies.
    required: false
    default: 'false'

outputs:
  used-lockfile:
    description: The lockfile used this session.

runs:
  using: composite
  steps:
    # Setup
    - name: Check lockfile being used
      id: lockfile-check
      run: |
        if [[ "${{ inputs.package-manager }}" == 'pip' ]]; then
          if [ -f "requirements.txt" ]; then
            lockfile="requirements.txt"
          fi
        elif [[ "${{ inputs.package-manager }}" == 'pipenv' ]]; then
          if [ -f "Pipfile.lock" ]; then
            lockfile="Pipfile.lock"
          fi
        elif [[ "${{ inputs.package-manager }}" == 'poetry' ]]; then
          if [ -f "poetry.lock" ]; then
            lockfile="poetry.lock"
          fi
        elif [[ "${{ inputs.package-manager }}" == 'miniconda' || "${{ inputs.package-manager }}" == 'anaconda' ]]; then
          if [ -f "environment.yml" ]; then
            lockfile="environment.yml"
          fi
        elif [[ "${{ inputs.package-manager }}" == 'pdm' ]]; then
          if [ -f "PDM.lock" ]; then
            lockfile="PDM.lock"
          fi
        elif [[ "${{ inputs.package-manager }}" == 'hatch' ]]; then
          if [ -f "hatch.lock" ]; then
            lockfile="hatch.lock"
          fi
        fi

        if [ -z "$lockfile" ]; then
          echo "No lockfile found for package manager: ${{ inputs.package-manager }}"
          echo "lockfile-exists=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "Lockfile found: $lockfile"
          echo "lockfile-exists=true" >> $GITHUB_OUTPUT
          echo "lockfile=$lockfile" >> $GITHUB_OUTPUT
        fi
        
    - name: Cache dependency lockfile
      if: ${{ inputs.cache == true }}
      uses: actions/cache@4.0.2
      with:
        path: ${{ steps.lockfile-check.outputs.lockfile }}
        key: ${{ inputs.language }}-${{ inputs.lang-ver }}_${{ inputs.package-manager }}-${{ inputs.manager-version }}_dependencies_${{ steps.lockfile-check.outputs.lockfile }}

    - name: Check package manager and set commands
      id: pkg-checker
      run: |
        if [[ "${{ inputs.package-manager }}" == 'easy_install' ]]; then
          echo "easy_install is deprecated. You should use pip instead."
        fi
        
        if [[ "${{ inputs.package-manager }}" == 'pip' || "${{ inputs.package-manager }}" == 'setuptools' || "${{ inputs.package-manager }}" == 'easy_install' ]]; then
          echo "install-manager=pip install --upgrade pip"
          echo "install-dependencies=pip install -r ${{ inputs.lockfile }}" >> $GITHUB_OUTPUT

        elif [[ "${{ inputs.package-manager }}" == 'pipenv' ]]; then
          echo "install-manager=pip install pipenv"
          echo "install-dependencies=pipenv 
          
        elif [[ "${{ inputs.package-manager }}" == 'miniconda' || "${{ inputs.package-manager }}" == 'anaconda' ]]; then
          echo "The conda environment will be created shortly."

        else
          echo "install-manager=pip install ${{ inputs.package-manager }}"
          echo "install-dependencies=${{ inputs.package-manager }} install"
        fi
        
    # Setup Python and dependencies
    - name: Setup -conda managers
      if: ${{ inputs.package-manager == 'miniconda' }} || ${{ inputs.package-manager == 'anaconda' }}
      uses: conda-incubator/setup-miniconda@v2
      with:
        python-version: ${{ inputs.lang-ver }}
        environment-file: ${{ steps.lockfile-check.outputs.lockfile }}
        
    - name: Setup Python
      if: ${{ inputs.language == 'python' }} && ${{ inputs.package-manager == 'miniconda' }} || ${{ inputs.language == 'python' }} && ${{ inputs.package-manager == 'anaconda' }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.lang-ver }}
        cache: ${{ inputs.package-manager }}
        
    - name: Install dependencies
      if: ${{ inputs.language == 'python' }} && ${{ inputs.package-manager == 'miniconda' }} || ${{ inputs.language == 'python' }} && ${{ inputs.package-manager == 'anaconda' }}
      run: ${{ steps.pkg-checker.outputs.install-dependencies }}
